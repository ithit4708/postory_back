<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jungsuk_2_1.postory.dao.PostDao">

    <insert id="createPost" parameterType="map">
        INSERT INTO post (POST_ID, POST_TTL, POST_SB_TTL, POST_PCHRG_YN,
                          POST_THUMN_PATH, SER_ID, PCHRG_BLK_PURC_PNT, NTCE_SETT_YN, ADO_YN, CHNL_ID,
                          BASIC_FONT_CD, BASIC_PARAG_ALGN_CD, ITD_YN, PARAG_GAP_MARG_YN, NOW_POST_STUS_CD,
                          NOW_POST_STUS_CHGR_ID, BEF_POST_ID, NEXT_POST_ID,POST_CONTENT)
        SELECT #{postId}, #{postTtl}, #{postSbTtl}, #{postPchrgYn},
               #{postThumnPath}, #{serId}, #{pchrgBlkPurcPnt}, #{ntceSettYn}, #{adoYn}, (SELECT CHNL_ID FROM channel WHERE CHNL_URI = #{chnlUri}),
               "FT00120",
               "AL00130",
               #{itdYn}, #{paragGapMargYn},
               "ST00420",
               #{nowPostStusChgrId}, #{befPostId}, #{nextPostId}, #{postContent}
    </insert>

    <update id="updateNextPostId" parameterType="map">
        update post
        set NEXT_POST_ID = #{nextPostId}
        where POST_ID = #{postId}
    </update>

    <update id="updatePost" parameterType="map">
        UPDATE post
        SET POST_TTL = #{postTtl},
            POST_SB_TTL = #{postSbTtl},
            POST_PCHRG_YN = #{postPchrgYn},
            POST_THUMN_PATH = #{postThumnPath},
            PCHRG_BLK_PURC_PNT = #{pchrgBlkPurcPnt},
            NTCE_SETT_YN = #{ntceSettYn},
            ADO_YN = #{adoYn},
            BASIC_FONT_CD =  "FT00120",
            BASIC_PARAG_ALGN_CD = "AL00130",
            ITD_YN = #{itdYn},
            PARAG_GAP_MARG_YN = #{paragGapMargYn},
            NOW_POST_STUS_CD =  "ST00420",
            NOW_POST_STUS_CHGR_ID = #{nowPostStusChgrId},
            POST_CONTENT = #{postContent}
        WHERE POST_ID = #{postId};

    </update>

    <update id="goToTrash">
        update post
        set  NOW_POST_STUS CD = 'ST00450'
        where POST_ID = #{postId};
    </update>

    <update id="updateNextPostBefPostId">
        update post
        set  BEF_POST_ID = #{befPostId}
        where POST_ID = #{postId};
    </update>

    <update id="updateBefPostNextPostId">
        update post
        set  NEXT_POST_ID =  #{nextPostId}
        where POST_ID = #{postId};
    </update>

    <update id="increaseViewCount" parameterType="Integer">
        UPDATE post
        SET POST_INQR_CNT = POST_INQR_CNT + 1
        WHERE POST_ID = #{postId}
    </update>


    <select id="checkUser" parameterType="map" resultType="boolean">
        SELECT
            CASE
                WHEN EXISTS (
                             SELECT
                                 1
                             FROM
                                 purchase
                             WHERE
                                 USER_ID = #{userId}
                               AND POST_ID = #{postId}
                         )
                    OR EXISTS (
                             SELECT
                                 1
                             FROM
                                 post p
                                     INNER JOIN channel c ON p.CHNL_ID = c.CHNL_ID
                             WHERE
                                 p.POST_ID = #{postId}
                               AND c.CRT_ID = #{userId}
                         )
                    THEN true
                ELSE false
                END AS result
    </select>

    <select id="fingPostsBySerId" parameterType="map" resultType="ChannelPostDto">
        SELECT p.*, s.SER_TTL, cd.CD_NM as nowPostStusCdNm , u.NIC
        FROM post AS p
        INNER JOIN channel AS c ON p.CHNL_ID = c.CHNL_ID
        LEFT JOIN common_code as cd ON p.NOW_POST_STUS_CD = cd.CD
        LEFT JOIN series as s ON p.SER_ID = s.SER_ID
        INNER JOIN user as u ON c.CRT_ID = u.USER_ID
        LEFT JOIN block as b ON b.POST_ID = p.POST_ID
        WHERE s.SER_ID = #{serId}
        <choose>
            <when test="orderMethod == 'latest'">
                ORDER BY p.POST_PBLC_DTM DESC
            </when>
            <when test="orderMethod == 'popularity'">
                ORDER BY p.POST_LIK_CNT DESC
            </when>
        </choose>
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <delete id="deletePost" parameterType="Integer">
        delete from post
        where POST_ID = #{postId}
    </delete>

    <delete id="deletePostByChnlId" parameterType="Integer">
        delete from post
        where CHNL_ID = #{chnlId}
    </delete>
    <delete id="deletePostBySerId" parameterType="Integer">
        delete from post
        where SER_ID = #{serId}
    </delete>

    <select id="getPostsByChnlUri" parameterType="map" resultType="ChannelPostDto">
        SELECT p.*, s.SER_TTL, u.NIC as userNic, u.USER_IMG_PATH, tg.TAG_NM as postType
        FROM post AS p
        INNER JOIN channel AS c ON p.CHNL_ID = c.CHNL_ID
        INNER JOIN common_code as cd ON p.NOW_POST_STUS_CD = cd.CD
        LEFT JOIN series as s ON p.SER_ID = s.SER_ID
        INNER JOIN user as u ON c.CRT_ID = u.USER_ID
        INNER JOIN post_tag as pt on p.POST_ID = pt.POST_ID
        INNER JOIN tag as tg on pt.TAG_ID = tg.TAG_ID
        LEFT JOIN block as b ON b.POST_ID = p.POST_ID
        --         LEFT JOIN text_block as tb ON tb.BLK_ID = b.BLK_ID AND b.BLK_KIND_CD =
        --         (SELECT CD FROM common_code WHERE CD_NM = '텍스트블록')
        WHERE c.CHNL_URI = #{chnlUri} AND
        tg.TAG_NM = #{postType}
        <choose>
            <when test="orderMethod == 'latest'">
                ORDER BY
                p.POST_ID DESC
                --                     p.POST_PBLC_DTM DESC
            </when>
            <when test="orderMethod == 'popularity'">
                ORDER BY p.POST_LIK_CNT DESC
            </when>
        </choose>
        LIMIT #{pageSize} OFFSET #{offset}
    </select>


    <select id="findLastId" resultType="Integer">
        SELECT MAX(POST_ID) FROM post
    </select>

    <select id="findInSeries" parameterType="map" resultType="Integer">
        SELECT MAX(POST_ID)
        FROM post
        WHERE CHNL_ID = (SELECT CHNL_ID FROM channel WHERE CHNL_URI = #{chnlUri})
          AND SER_ID = #{serId}
    </select>

    <select id="findInNonSeries" parameterType="map" resultType="Integer">
        SELECT MAX(POST_ID)
        FROM post
        WHERE CHNL_ID = (SELECT CHNL_ID FROM channel WHERE CHNL_URI = #{chnlUri})
          AND (SER_ID = #{serId} OR (#{serId} IS NULL AND SER_ID IS NULL))
    </select>

    <select id="findInStudioByChnlUri" parameterType="String" resultType="StudioPostDto">
        SELECT p.POST_ID as postId,
               p.POST_TTL as postTtl,
               p.POST_INQR_CNT as postInqrCnt,
               p.POST_REP_CNT as postRepCnt,
               p.POST_LIK_CNT as postLikCnt,
               p.POST_PCHRG_YN as postPchrgYn,
               p.POST_THUMN_PATH as postThumnPath,
               p.SER_ID as serId,
               p.OPUB_PLAN_ID as opubPlanId,
               p.POST_PBLC_DTM as postPblcDtm,
               p.CHNL_ID as chnlId,
               p.NOW_POST_STUS_CD as nowPostStusCd,
               p.NOW_POST_STUD_CHG_DTM as nowPostStudChgDtm,
               s.SER_TTL as serTtl,
               u.NIC as userNic,
               ccd.CD_NM as nowPostStusCdNm
        FROM post as p
                 INNER JOIN channel c ON p.CHNL_ID = c.CHNL_ID
                 INNER JOIN user as u ON c.CRT_ID = u.USER_ID
                 INNER JOIN common_code as ccd ON p.NOW_POST_STUS_CD = ccd.CD
                 LEFT JOIN series as s ON p.SER_ID = s.SER_ID
        WHERE c.CHNL_URI = #{chnlUri}
    </select>

    <select id="findById" parameterType="Integer" resultType="PostDto">
        SELECT p.POST_ID as postId,
               p.POST_TTL as postTtl,
               p.POST_INQR_CNT as postInqrCnt,
               p.POST_REP_CNT as postRepCnt,
               p.POST_LIK_CNT as postLikCnt,
               p.POST_PCHRG_YN as postPchrgYn,
               p.POST_THUMN_PATH as postThumnPath,
               p.SER_ID as serId,
               p.OPUB_PLAN_ID as opubPlanId,
               p.POST_PBLC_DTM as postPblcDtm,
               p.CHNL_ID as chnlId,
               p.NOW_POST_STUS_CD as nowPostStusCd,
               p.NOW_POST_STUD_CHG_DTM as nowPostStudChgDtm,
               p.BEF_POST_ID,
               p.NEXT_POST_ID,
               pt.TAG_ID as tagId,
               s.SER_TTL as serTtl,
               u.NIC as userNic,
               cc.CD_NM as nowPostStusCdNm
        FROM post as p
                 INNER JOIN channel c ON p.CHNL_ID = c.CHNL_ID
                 INNER JOIN user as u ON c.CRT_ID = u.USER_ID
            INNER JOIN  post_tag as pt ON p.POST_ID = pt.POST_ID
                 LEFT JOIN common_code as cc ON p.NOW_POST_STUS_CD = cc.CD
                 LEFT JOIN series as s ON p.SER_ID = s.SER_ID
        WHERE p.POST_ID = #{postId}
    </select>


    <select id="doesExist" parameterType="Integer" resultType="java.lang.Boolean">
        select exists(select  1 from post where POST_ID = #{postID})
    </select>

    <select id="findRelatedPostById" resultType="PostRelatedDto">
        select p.POST_ID, p.BEF_POST_ID, p.NEXT_POST_ID
        from post as p
        where POST_ID = #{postId}
    </select>

    <select id="findIdBySerId" parameterType="Integer" resultType="OnlyIdDto">
        select p.POST_ID as id
        from post as p
        where p.SER_ID = #{serId}
    </select>

    <select id="findIdByChnlId" resultType="OnlyIdDto">
        select POST_ID
        from post
        where CHNL_ID = #{chnlId}
    </select>

    <select id="findByIdInContent" parameterType="Integer" resultType="PostViewDto">
        SELECT p.*, s.SER_TTL, cd.CD_NM as nowPostStusCdNm , u.NIC as userNic, u.USER_IMG_PATH, tg.TAG_NM as postType, p.POST_CONTENT, c.CHNL_URI
        FROM post AS p
                 INNER JOIN channel AS c ON p.CHNL_ID = c.CHNL_ID
                 INNER JOIN common_code as cd ON p.NOW_POST_STUS_CD = cd.CD
                 LEFT JOIN series as s ON p.SER_ID = s.SER_ID
                 INNER JOIN user as u ON c.CRT_ID = u.USER_ID
                 INNER JOIN post_tag as pt on p.POST_ID = pt.POST_ID
                 INNER JOIN tag as tg on pt.TAG_ID = tg.TAG_ID
                 LEFT JOIN block as b ON b.POST_ID = p.POST_ID
        where p.post_id = #{postId}
    </select>

    <select id="getPostsBySc" parameterType="map" resultType="ChannelPostDto">
        SELECT p.*, ser.SER_TTL, u.NIC as userNic, u.USER_IMG_PATH, tg.TAG_NM as postType,
        CASE WHEN sc.user_id IS NOT NULL THEN 1 ELSE 0 END AS isScraped
        FROM post AS p
        INNER JOIN channel AS c ON p.CHNL_ID = c.CHNL_ID
        INNER JOIN user u ON u.user_id = c.crt_id
        LEFT JOIN scrap sc ON #{userId} = sc.user_id AND p.POST_ID = sc.POST_ID
        INNER JOIN common_code as cd ON p.NOW_POST_STUS_CD = cd.CD
        LEFT JOIN series as ser ON p.SER_ID = ser.SER_ID
        INNER JOIN post_tag as pt on p.POST_ID = pt.POST_ID
        INNER JOIN tag as tg on pt.TAG_ID = tg.TAG_ID
        LEFT JOIN block as b ON b.POST_ID = p.POST_ID
        WHERE
        tg.TAG_NM = #{postType}
        <choose>
            <when test="option == 'title'">
                AND p.POST_TTL LIKE CONCAT('%', #{keyword}, '%')
            </when>
            <when test="option == 'content'">
                AND p.POST_CONTENT LIKE CONCAT('%', #{keyword}, '%')
            </when>
            <when test="option == 'all'">
                AND (p.POST_TTL LIKE CONCAT('%', #{keyword}, '%') OR p.POST_CONTENT LIKE CONCAT('%', #{keyword}, '%'))
            </when>
        </choose>
        <choose>
            <when test="orderMethod == 'latest'">
                ORDER BY
                p.POST_ID DESC
            </when>
            <when test="orderMethod == 'popularity'">
                ORDER BY p.POST_LIK_CNT DESC
            </when>
        </choose>
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="findChannelByPostId" resultType="ChannelSimpleDto">
        select c.chnl_ttl, c.chnl_img_path, c.chnl_ttl, c.chnl_uri, c.crt_id, c.chnl_intro, c.chnl_id
        from post as p
                 inner join channel as c on p.chnl_id = c.chnl_id
        where p.post_id = #{postId}
    </select>
</mapper>